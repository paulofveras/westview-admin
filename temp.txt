import { Component, OnDestroy, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { Quadrinho } from '../models/quadrinho.model';
import { QuadrinhoService } from '../services/quadrinho.service';
import { AuthService } from '../services/auth.service';
import { ActivatedRoute } from '@angular/router';

// >>> IMPORTS DO PAGINATOR
import { MatPaginatorModule, PageEvent, MatPaginatorIntl } from '@angular/material/paginator';
import { FormsModule } from '@angular/forms';

// >>> PT-BR para o paginator (arquivo novo logo abaixo)
import { getPtBrPaginatorIntl } from '../shared/paginator-ptbr';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatCardModule } from '@angular/material/card';
import { MatChipsModule } from '@angular/material/chips';
import { MatTooltipModule } from '@angular/material/tooltip';

@Component({
  selector: 'app-quadrinho-list',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule,
    FormsModule,
    MatPaginatorModule,
    MatFormFieldModule,
    MatInputModule,
    MatIconModule,
    MatButtonModule,
    MatCardModule,
    MatChipsModule,
    MatTooltipModule
  ],
  templateUrl: './quadrinho-list.html',
  styleUrls: ['./quadrinho-list.css'],
  providers: [
    { provide: MatPaginatorIntl, useFactory: getPtBrPaginatorIntl } // labels em português
  ]
})
export class QuadrinhoListComponent implements OnInit, OnDestroy {

  quadrinhos: Quadrinho[] = [];
  readonly placeholderImage = 'assets/images/placeholder-comic.svg';
  private imageUrls = new Map<number, string>();

  // >>> CONTROLES DE PAGINAÇÃO/PESQUISA
  page = 0;
  pageSize = 12;
  length = 0;   // será totalRecords ou filteredRecords, conforme q
  q = '';       // termo de pesquisa
  isPublicView = false;

  constructor(
    private quadrinhoService: QuadrinhoService,
    public authService: AuthService,
    private route: ActivatedRoute
  ) {}

  ngOnInit(): void {
    this.isPublicView = this.route.snapshot.data?.['publicView'] ?? false;
    this.load();
  }

  ngOnDestroy(): void {
    this.clearImageCache();
  }

  // >>> CARREGA USANDO O ENDPOINT /quadrinhos/paged
  load(): void {
    this.quadrinhoService.findPaged(this.page, this.pageSize, this.q).subscribe(res => {
      this.quadrinhos = res.data;
      this.length = this.q ? res.filteredRecords : res.totalRecords;
      this.populateImages(this.quadrinhos);
    });
  }

  pesquisar(): void {
    this.page = 0;      // sempre voltar para a primeira página ao trocar a busca
    this.load();
  }

  paginar(event: PageEvent): void {
    this.page = event.pageIndex;
    this.pageSize = event.pageSize;
    this.load();
  }

  getImageSrc(quadrinho: Quadrinho): string {
    return this.imageUrls.get(quadrinho.id) ?? this.placeholderImage;
  }

  onImageError(event: Event): void {
    const target = event.target as HTMLImageElement;
    target.src = this.placeholderImage;
  }

  excluir(quadrinho: Quadrinho): void {
    if (this.isPublicView) {
      return;
    }
    if (confirm(`Deseja realmente excluir o quadrinho "${quadrinho.nome}"?`)) {
      this.quadrinhoService.delete(quadrinho).subscribe({
        next: () => this.quadrinhos = this.quadrinhos.filter(q => q.id !== quadrinho.id),
        error: (err) => console.error('Erro ao excluir quadrinho', err)
      });
    }
  }

  private populateImages(quadrinhos: Quadrinho[]): void {
    const idsOnPage = new Set(quadrinhos.map(q => q.id));

    for (const [id, url] of Array.from(this.imageUrls.entries())) {
      if (!idsOnPage.has(id)) {
        URL.revokeObjectURL(url);
        this.imageUrls.delete(id);
      }
    }

    quadrinhos.forEach(quadrinho => {
      if (!quadrinho.nomeImagem) {
        const existing = this.imageUrls.get(quadrinho.id);
        if (existing) {
          URL.revokeObjectURL(existing);
          this.imageUrls.delete(quadrinho.id);
        }
        return;
      }

      this.quadrinhoService.downloadImagem(quadrinho.nomeImagem).subscribe({
        next: (blob) => {
          const existing = this.imageUrls.get(quadrinho.id);
          if (existing) {
            URL.revokeObjectURL(existing);
          }
          const objectUrl = URL.createObjectURL(blob);
          this.imageUrls.set(quadrinho.id, objectUrl);
        },
        error: () => {
          const existing = this.imageUrls.get(quadrinho.id);
          if (existing) {
            URL.revokeObjectURL(existing);
            this.imageUrls.delete(quadrinho.id);
          }
        }
      });
    });
  }

  private clearImageCache(): void {
    for (const url of this.imageUrls.values()) {
      URL.revokeObjectURL(url);
    }
    this.imageUrls.clear();
  }
}

